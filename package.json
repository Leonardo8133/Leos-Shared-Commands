{
  "name": "command-manager",
  "displayName": "Command Manager",
  "description": "Manage and execute commands with variables, chains, and flexible terminal options",
  "version": "1.0.0",  
  "publisher": "LeonardoSouza",
  "author": {
    "name": "Leonardo de Souza Chaves",
    "email": "leonardo2sc@gmail.com"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "command",
    "manager",
    "variables",
    "terminal",
    "options",
    "readme",
    "documentation",
    "list"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Leonardo8133/Leos-Shared-Commands"
  },
  "homepage": "https://github.com/Leonardo8133/Leos-Shared-Commands#readme",
  "bugs": {
    "url": "https://github.com/Leonardo8133/Leos-Shared-Commands/issues"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/src/extension.js",
  "icon": "resources/add-list.png",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "command-manager",
          "title": "Command Manager",
          "icon": "resources/add-list.png"
        }
      ]
    },
    "views": {
      "command-manager": [
        {
          "id": "commandManagerTree",
          "name": "Commands",
          "group": "1_commands"
        },
        {
          "id": "documentationHubTree",
          "name": "Documentation Hub",
          "group": "2_documentation"
        }
      ]
    },
    "commands": [
      {
        "command": "commandManager.runCommand",
        "title": "Run Command",
        "icon": "$(play)"
      },
      {
        "command": "commandManager.runCommandById",
        "title": "Run Saved Command"
      },
      {
        "command": "commandManager.editCommand",
        "title": "Edit Command",
        "icon": "$(edit)"
      },
      {
        "command": "commandManager.newCommand",
        "title": "New Command",
        "icon": "$(add)"
      },
      {
        "command": "commandManager.newFolder",
        "title": "New Folder",
        "icon": "$(new-folder)"
      },
      {
        "command": "commandManager.editFolder",
        "title": "Edit Folder",
        "icon": "$(gear)"
      },
      {
        "command": "commandManager.duplicateCommand",
        "title": "Duplicate Command"
      },
      {
        "command": "commandManager.pinToStatusBar",
        "title": "Pin Command in Status Bar"
      },
      {
        "command": "commandManager.deleteItem",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "commandManager.openConfig",
        "title": "Open Configuration File"
      },
      {
        "command": "commandManager.refresh",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "commandManager.openConfiguration",
        "title": "Configuration",
        "icon": "$(gear)"
      },
      {
        "command": "commandManager.quickRun",
        "title": "Run Saved Command",
        "icon": "$(rocket)"
      },
      {
        "command": "documentationHub.openFile",
        "title": "Documentation Hub: Open File"
      },
      {
        "command": "documentationHub.copyPath",
        "title": "Documentation Hub: Copy Path"
      },
      {
        "command": "documentationHub.extractCommands",
        "title": "Documentation Hub: Extract Commands"
      },
      {
        "command": "documentationHub.search",
        "title": "Documentation Hub: Search",
        "icon": "$(search)"
      },
      {
        "command": "documentationHub.toggleViewMode",
        "title": "Documentation Hub: Toggle View Mode",
        "icon": "$(list-tree)"
      },
      {
        "command": "documentationHub.refresh",
        "title": "Documentation Hub: Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "documentationHub.openSection",
        "title": "Documentation Hub: Open Section"
      },
      {
        "command": "documentationHub.hideItem",
        "title": "Documentation Hub: Hide Item"
      },
      {
        "command": "documentationHub.unhideItem",
        "title": "Documentation Hub: Unhide Item"
      },
      {
        "command": "documentationHub.unhideAll",
        "title": "Documentation Hub: Unhide All",
        "icon": "$(eye)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "commandManager.newCommand",
          "when": "view == commandManagerTree",
          "group": "navigation@1"
        },
        {
          "command": "commandManager.newFolder",
          "when": "view == commandManagerTree",
          "group": "navigation@2"
        },
        {
          "command": "commandManager.refresh",
          "when": "view == commandManagerTree",
          "group": "navigation@3"
        },
        {
          "command": "commandManager.openConfiguration",
          "when": "view == commandManagerTree",
          "group": "navigation@4"
        },
        {
          "command": "documentationHub.search",
          "when": "view == documentationHubTree",
          "group": "navigation@1"
        },
        {
          "command": "documentationHub.toggleViewMode",
          "when": "view == documentationHubTree",
          "group": "navigation@2"
        },
        {
          "command": "documentationHub.refresh",
          "when": "view == documentationHubTree",
          "group": "navigation@3"
        },
        {
          "command": "documentationHub.unhideAll",
          "when": "view == documentationHubTree",
          "group": "navigation@4"
        }
      ],
      "view/item/context": [
        {
          "command": "commandManager.runCommand",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "inline@1"
        },
        {
          "command": "commandManager.editCommand",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "inline@2"
        },
        {
          "command": "commandManager.runCommand",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "1_actions@1"
        },
        {
          "command": "commandManager.editCommand",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "1_actions@2"
        },
        {
          "command": "commandManager.pinToStatusBar",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "1_actions@3"
        },
        {
          "command": "commandManager.duplicateCommand",
          "when": "view == commandManagerTree && viewItem == command",
          "group": "2_modify@1"
        },
        {
          "command": "commandManager.deleteItem",
          "when": "view == commandManagerTree",
          "group": "2_modify@2"
        },
        {
          "command": "commandManager.newCommand",
          "when": "view == commandManagerTree && viewItem == folder",
          "group": "3_new@1"
        },
        {
          "command": "commandManager.newFolder",
          "when": "view == commandManagerTree && viewItem == folder",
          "group": "3_new@2"
        },
        {
          "command": "commandManager.editFolder",
          "when": "view == commandManagerTree && viewItem == folder",
          "group": "2_modify@1"
        },
        {
          "command": "documentationHub.openFile",
          "when": "view == documentationHubTree && (viewItem == documentationFile || viewItem == documentationReadme)",
          "group": "navigation@1"
        },
        {
          "command": "documentationHub.copyPath",
          "when": "view == documentationHubTree && (viewItem == documentationFile || viewItem == documentationReadme)",
          "group": "navigation@2"
        },
        {
          "command": "documentationHub.extractCommands",
          "when": "view == documentationHubTree && viewItem == documentationReadme",
          "group": "navigation@3"
        },
        {
          "command": "documentationHub.hideItem",
          "when": "view == documentationHubTree && (viewItem == documentationFolder || viewItem == documentationReadme)",
          "group": "4_hide@1"
        },
        {
          "command": "documentationHub.unhideItem",
          "when": "view == documentationHubTree && (viewItem == documentationFolder || viewItem == documentationReadme)",
          "group": "4_hide@2"
        }
      ]
    },
    "configuration": {
      "title": "Command Manager",
      "properties": {
        "commandManager.documentationHub.viewMode": {
          "type": "string",
          "enum": ["tree", "flat"],
          "default": "tree",
          "description": "Choose whether the documentation hub displays markdown files in a folder tree or a flat list."
        },
        "commandManager.documentationHub.position": {
          "type": "string",
          "enum": ["top", "bottom"],
          "default": "bottom",
          "description": "Control whether the documentation hub appears above or below the command list in the Command Manager view container."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "node scripts/compile.js",
    "watch": "tsc -watch -p ./",
    "watch:all": "concurrently \"tsc -watch -p ./\" \"npm run watch:html\"",
    "watch:html": "node -e \"const fs=require('fs');const path=require('path');const {exec}=require('child_process');const watchDir='resources';let timeout;function compile(){clearTimeout(timeout);timeout=setTimeout(()=>exec('npm run compile',(e,o,er)=>console.log('HTML changed, compiling...')),100);}fs.watch(watchDir,{recursive:true},(e,f)=>f.endsWith('.html')&&compile());console.log('Watching HTML files in',watchDir);\"",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js",
    "test:watch": "npm run watch && npm run test",
    "test:playwright": "npm run compile && npx playwright test",
    "test:ui": "npx wdio run wdio.conf.js",
    "test:all": "npm test && npm run test:playwright && npm run test:ui"
  },
  "devDependencies": {
    "@playwright/test": "^1.56.1",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^20.0.0",
    "@types/vscode": "^1.85.0",
    "@vscode/test-electron": "^2.3.0",
    "@wdio/cli": "^9.20.0",
    "@wdio/local-runner": "^9.20.0",
    "@wdio/mocha-framework": "^9.20.0",
    "@wdio/spec-reporter": "^9.20.0",
    "chokidar": "^3.6.0",
    "concurrently": "^8.2.2",
    "glob": "^10.3.0",
    "mocha": "^10.0.0",
    "playwright": "^1.56.1",
    "typescript": "^5.3.0",
    "wdio-vscode-service": "^6.1.4",
    "webdriverio": "^8.46.0"
  }
}
